
* general emacs settings
** disable line wrap globally
can be set back with: M-x toggle-truncate-lines
#+BEGIN_SRC emacs-lisp
(set-default 'truncate-lines t)
#+END_SRC
** macro for pasting from excel C-c...
removing the trailinng newline
#+BEGIN_SRC emacs-lisp
(fset 'excel-cell-value
   [?\M-> ?\C-y backspace ?\C-a ?\C-k ?\M-<])
;; bind it to a free key combo
(global-set-key (kbd "M-s s") 'excel-cell-value)
#+END_SRC
** spaces vs tabs

can insert tab with C-q <TAB>...
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(define-key text-mode-map (kbd "<tab>") 'tab-to-tab-stop)
(setq tab-stop-list (number-sequence 4 120 4))
#+END_SRC

setting up indent region, as altGr is not working with keychords
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-M-<tab>") 'indent-region)
#+END_SRC
** parentheses
#+BEGIN_SRC emacs-lisp
(show-paren-mode t)
#+END_SRC
** zapping
#+BEGIN_SRC emacs-lisp
(autoload 'zap-up-to-char "misc"
    "Kill up to, but not including ARGth occurrence of CHAR.
  
  \(fn arg char)"
    'interactive)
;; replaced the basic zap-to-and-including-version
(global-set-key "\M-z" 'zap-up-to-char)
#+END_SRC
** modeline & window appearance

#+BEGIN_SRC emacs-lisp
(setq column-number-mode t)
(tool-bar-mode -1)
(toggle-scroll-bar -1)
(menu-bar-mode -1) 
(transient-mark-mode -1)
(setq inhibit-startup-screen t)
(setq ring-bell-function (lambda ()))
#+END_SRC
** killing
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x k") 'kill-this-buffer)
(setq save-interprogram-paste-before-kill t)
;; savehist
(require 'savehist)
(setq savehist-file (concat user-emacs-directory "savehist"))
(savehist-mode 1)
(setq savehist-save-minibuffer-history 1)
(setq savehist-additional-variables
      '(kill-ring
        search-ring
        regexp-search-ring))
(setq-default save-place t)

#+END_SRC

** internals
Adjust GC threshold to 20 megabytes.  This dramatically improves
startup time and helps with the overall speed of Emacs.
https://github.com/jschaf/dotemacs/blob/master/init.el

#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold (* 20 1024 1024))
#+END_SRC

** enable disabled commands
#+BEGIN_SRC emacs-lisp
;; enable casing commands
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)
#+END_SRC

** clever indent
#+BEGIN_SRC emacs-lisp
;; testing clever indent from here:
;; https://ogbe.net/emacsconfig.html
(defun beginning-of-line-or-indentation ()
  "move to beginning of line, or indentation"
  (interactive)
  (if (bolp)
      (back-to-indentation)
    (beginning-of-line)))
(global-set-key [remap move-beginning-of-line]
                'beginning-of-line-or-indentation)
#+END_SRC

** movement
#+BEGIN_SRC emacs-lisp
(setq scroll-preserve-screen-position 'always)
(keyfreq-mode 1)
(keyfreq-autosave-mode 1)
#+END_SRC
** y/n
#+BEGIN_SRC emacs-lisp
;; setting y/n
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** editing
Stopping in camelCase words.
#+BEGIN_SRC emacs-lisp
(global-subword-mode 1)
#+END_SRC
Overwrite selected text.
#+BEGIN_SRC emacs-lisp
(delete-selection-mode 1)
#+END_SRC

** encoding
Picking utf-8 as default.
#+BEGIN_SRC emacs-lisp
(set-language-environment "UTF-8")
(set-default-coding-systems 'utf-8)
#+END_SRC
** recursive editing
From [[http://www.wilfred.me.uk/.emacs.d/init.html][here]], adjusting the minibuffer.
#+BEGIN_SRC emacs-lisp
(setq enable-recursive-minibuffers t)
(minibuffer-depth-indicate-mode 1)
#+END_SRC
* Org mode settings
** key combinations
Classic settings
#+BEGIN_SRC emacs-lisp
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(define-key global-map "\C-cc" 'org-capture)
;; main org file
(global-set-key (kbd "C-c o") 
                (lambda () (interactive) (find-file "D:\\PersonalData\\MolnaKri\\Desktop\\org\\organizer.org")))
#+END_SRC

** settings
*** org agenda related
The location of the agenda files are machine specific, so they live in the 
appropriate config file.
#+BEGIN_SRC emacs-lisp
(setq org-refile-targets (quote ((org-agenda-files :maxlevel . 4))))
(setq org-refile-use-outline-path 'file)
(setq org-outline-path-complete-in-steps t)
(setq calendar-mark-diary-entries-flag t)
#+END_SRC
*** misc settings

#+BEGIN_SRC emacs-lisp
(setq org-log-done t)
;; week starts on monday:
(setq calendar-week-start-day 1)
(setq org-src-fontify-natively t)
#+END_SRC

Plain lists are displayed in a folded state. Especially useful when holding data
in the DONE/RESCHEDULED lists.
#+BEGIN_SRC emacs-lisp
(setq org-cycle-include-plain-lists 'integrate)
#+END_SRC

*** windows interop

org-mode to open xls,xlsx in excel
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-file-apps '("\\.xlsx?\\|.docx?\\'" . default))
;; recognizing outlook
;; okay, hopefully this is general on all windows machines
(defcustom org-outlook-location (w32-short-file-name "C:/Program Files/Microsoft Office/Office15/OUTLOOK.exe")
  "* Microsoft Outlook 2013 location."
  :type 'string
  :group 'org-outlook)
#+END_SRC
*** capture templates
The templates themselves are specific to the local files.

#+BEGIN_SRC emacs-lisp
;; customizing typefaces
(setq org-todo-keyword-faces
         '(("TODO" . org-warning) 
           ("START" . "green") 
           ("WAITING" . (:background "yellow" :foreground "black" :Weight bold))
           ("CANCELED" . (:foreground "blue" :weight bold))
           ("DELEGATED" . (:foreground "yellow" :Weight bold))
         ))

(setq org-todo-keywords
 '((sequence
 "TODO(t)"
    "STARTED(s!)"
    "WAITING(w@/!)" "|" "DONE(d!)"  "CANCELED(c@)")
   (sequence "BUG(b)"  "|" "RESOLVED(r)" "WONTFIX(w)")
   (sequence "TODELEGATE(-)" "DELEGATED(d)" "|" "COMPLETE(x)")))


#+END_SRC

*** custom stuff
git commit on saving org files. Pretty crude, perhaps i should polish this.
#+BEGIN_SRC emacs-lisp

(defun org-git-commit-with-ps () (interactive)
  (let ((proc (start-process "ps" "psout" "powershell.exe" "-Command" (concat "cd " my-org-folder "; git commit -a -m 'commit on emacs after-save-hook'" ))))
  (set-process-query-on-exit-flag proc nil)))
#+END_SRC

getting outlook references of emails for indexing inbox + opening GUID links
#+BEGIN_SRC emacs-lisp
(defun org-reach-for-outlook-link () (interactive)
  (let ((proc (start-process "ps" "psout" "powershell.exe" "-File" outlook-hook-script )))
  (set-process-query-on-exit-flag proc nil)))

;; http://jfh.me/post/65485740773/linking-directly-to-outlook-messages-using
(org-add-link-type "outlook" 'org-outlook-open)

(defun org-outlook-open (id)
   "Open the Outlook item identified by ID.  ID should be an Outlook GUID."
   (w32-shell-execute "open" "outlook" (concat "outlook:" id)))

(provide 'org-outlook)
#+END_SRC


*** org babel settings
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)))
#+END_SRC
* mode specific settings

** misc mode settings
#+BEGIN_SRC emacs-lisp
;; one uarg switches, two uarg kills selected window
(global-set-key (kbd "C-x o") 'ace-window)
;; use-package macro
(package-install 'use-package)
;; etc
(package-install 'expand-region)

(use-package expand-region
  :ensure t
  :defer t
  :bind (("C-c e" . er/expand-region)))

;; undo tree?
(package-install 'undo-tree)
(use-package undo-tree
  :ensure t
  :init (global-undo-tree-mode t)
  :defer t
  :diminish ""
  :config
  (progn
    (define-key undo-tree-map (kbd "C-x u") 'undo-tree-visualize)
    (define-key undo-tree-map (kbd "C-/") 'undo-tree-undo)))

(setq undo-tree-visualizer-timestamps t)
;; smart bookmarking within emacs
(require 'bookmark+)
(use-package bookmark+
  :ensure t
  :defer 10
  :config
  (progn
    (setq bookmark-version-control t
          ;; auto-save bookmarks
          bookmark-save-flag 1)))


;; for large files
(use-package vlf-setup
  :ensure vlf)

#+END_SRC

** powershell mode
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lisp")
(load "powershell-mode.el")
(add-to-list 'auto-mode-alist '("\\.ps1\\'" . powershell-mode))
(autoload 'powershell "powershell" "Start a interactive shell of PowerShell." t)
#+END_SRC
** csv mode
#+BEGIN_SRC emacs-lisp
(load "csv-mode.el")
#+END_SRC
** desktop mode
#+BEGIN_SRC emacs-lisp
(load "desktop.el")
#+END_SRC

** package
#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives
             '("melpa-stable" . "http://stable.melpa.org/packages/") t)
(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)

#+END_SRC

** dired+
#+BEGIN_SRC emacs-lisp
(require 'dired+)
#+END_SRC
** ac
#+BEGIN_SRC emacs-lisp
;; setting up ac
(ac-config-default)
#+END_SRC

** ediff
character level diffs
#+BEGIN_SRC emacs-lisp
(setq-default ediff-forward-word-function 'forward-char)
#+END_SRC
** magit
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC

As M-w is bound to magit-copy-buffer-revision by default, it's making really
hard to copy from a magit buffer.
#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'magit
  (define-key magit-mode-map (kbd "M-w") 'kill-ring-save))
#+END_SRC



** helm
#+BEGIN_SRC emacs-lisp
(package-install 'helm)
(require 'helm-config)
;; https://writequit.org/denver-emacs/presentations/2016-03-01-helm.html
(global-set-key (kbd "C-c h") 'helm-command-prefix)
(helm-mode 1)
;; settings
(define-key helm-map (kbd "C-z") 'helm-select-action)
;; open helm buffer inside current window, don't occupy the entire other window
(setq helm-split-window-in-side-p t)
;; move to end or beginning of source when reaching top or bottom of source.
(setq helm-move-to-line-cycle-in-source t)
;; this will be handy
(global-set-key (kbd "M-y") 'helm-show-kill-ring)
;; as well as this, just don't forget to use it:
(global-set-key (kbd "C-h SPC") 'helm-all-mark-rings)

(global-set-key (kbd "M-x") 'helm-M-x) 

;; playing nice with org-refile - so helm can pick from all possible completions
(setq org-outline-path-complete-in-steps nil)

;; instead of switch buffer, we'll use helm-buffer list
(global-set-key (kbd "C-x b") 'helm-buffers-list) 

#+END_SRC
** ess
[[http://r.789695.n4.nabble.com/Installing-R-Emacs-MikTeX-editor-on-a-USB-drive-td3039252.html][reference]]
#+BEGIN_SRC emacs-lisp
(setq ess-smart-S-assign-key ":")
#+END_SRC
** python
#+BEGIN_SRC emacs-lisp
;; trying to fix the python interpreter problem
(setq python-shell-prompt-detect-failure-warning nil)

(with-eval-after-load 'python
  (defun python-shell-completion-native-try ()
    "Return non-nil if can trigger native completion."
    (let ((python-shell-completion-native-enable t)
          (python-shell-completion-native-output-timeout
           python-shell-completion-native-try-output-timeout))
      (python-shell-completion-native-get-completions
       (get-buffer-process (current-buffer))
       nil "_"))))
#+END_SRC
